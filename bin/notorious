#! /usr/bin/env ruby

require 'notorious'
require 'optparse'

def parse
  options = {}

  opts = OptionParser.new do |opts|
    opts.banner = "Usage: notorious [options] [action] file"
    opts.separator ""
    opts.separator "actions:"
    opts.separator "    build [file]                     The markdown file to build."

    opts.separator ""
    opts.separator "options:"

    opts.on("-o", "--output [file]", String,
      "Specify output file name (defaults to input_file.html)") do |o|
      o = Notorious.ensure_extension(o, "html")
      options[:output] = o
    end

    opts.on("-s", "--stylesheet [file]", String,
      "Specify a custom stylesheet") do |s|
      s = Notorious.ensure_extension(s, "css")
      options[:stylesheet] = s
    end

    opts.on("-t", "--title [name]", String,
      "Specify a title") do |t|
      options[:title] = t
    end

    opts.on("-v", "--verbose", "Run verbosely") do |v|
      options[:verbose] = v
    end

    opts.on("--version", "Print Version") do |v|
      options[:version] = v
    end

  end
  opts.parse!
  options
end

# Parse options
options = parse

if options[:version]
  puts "Notorious: version #{Notorious::VERSION}"
  exit
end

# assign arguments
unless ARGV[0]
  puts "Notorious. Run `notorious --help` for details"
end

if ARGV[0] == 'build' && !ARGV[1]
  raise(ArgumentError, "you must specify a file to build")
end

case ARGV[0]
when 'build'
  options[:file_names] = ARGV[1..-1]
  raise(ArgumentError, "you must specify a file to build") if options[:file_names].length == 0
when 'example'
  options[:file_names] = [File.expand_path("../../spec/examples/example_notes.md", __FILE__)]
else
  raise ArgumentError, "you have specified an invalid command"
end

# must be a markdown files
options[:file_names].each do |f|
  Notorious.validate_extension(f, ["md", "mdown", "markdown", "Markdown"])
end

options[:stylesheet] ||= File.expand_path("../../stylesheets/default.css", __FILE__)

unless options[:output]
  if options[:file_names].length == 1
    file_name = options[:file_names][0]
    split = file_name.split('.')
    split.pop if split.length > 1
    options[:output] = split.push('html').join('.')
  else
    options[:output] = 'multiple_files.html'
  end
end


# Decide what to call
Notorious.build(options)
